var problems :
1- not respect block scope [for-loop ,if ,while...]
if you declare varaible with var in block scope => this varaible will be global => you can access it outside the block scope 
2- you can re-declare varaible with the same name in same scope
3- varaible with var takes place in globally scoped (window)
4- you can use varaible before declare it and will return undefined
js at first takes all variables and func at file beginning with value = undefined ,untill declare line come

//    let                                           const
//reject re-declared in same scope    //reject re-declared in same scope
//enable re-assign                    //reject re-assign => const not alllow reset varaible value 
//both support function & block scope
//reject globally scope (window)

//primative type/prop 
1-(immutate types) cant edit it ,re-assign only
2-working:(pass by value) varaible2 = varaible1 => varaible2 carry varaible1 value not address,so if varaible1 changed ,varaible2 not change     
3-havent methods
//undefined
//Boolean
//Number
//String
//BigInt
//Symbol

//referance type/prop
1-(mutate types) can edit it without re-assign ,so most of time we use const for declare(array ,object ,func),because we didnt need to re-assign
2-working:(pass by object) array2 = array1 => array2 point array1 referance(point value) ,so if array1 value changed ,array2 will have same change and vice versa  
//array ,object ,function

let colneArray = Object.assign([],myArray) => clone new array with new referance
Object.freeze(myArray) => disable array clone and edit

// (value || "save" ) => if value = null or undefined replace value to "save"

// if([]) => true
// if({}) => true
Else empty value => false 
// if("") => false

//{numbers}
//value.toString()
//string(value)
//value.tofixed(n) --> select how many number after sign
//parseInt(value)
//parseInt(value,baise)
//parseInt("00011",2) => 3 (convert binary to decimal)
//parsInt("55amr") => 55
//parseFloat(value)
//number(value)
//Number.isInteger(value)
// integer number =>  ( number % 1 == 0 )
//isNAN(value)

//{math}
//math.round(value)
//math.ceil(value)
//math.floor(value)
//math.max(a,b,c,d)
//math.min(a,b,c,d)
//math.pow(2,4);
//Math.sqrt(number)
// Math.random()*9 --> random number from 0 to 8
//math.trunc(value) --> ignore fractions part

// {string method}
//value[10] --> if not found return undefined
//value.charAt(10) --> if not found return "" (empty string)
//value.charCodeAt(indx) --> return UTF-16 Code of char 
96 < [a-z] < 123   => lower Letter UTF-16 code ( to make sure value is letter not else )  
64 < [A-Z] < 91    => upper Letter UTF-16 code 
//value.length
//value.trim() --> for remove  pre and pos white spaces from string
//value.toUpperCase()
//value.toLowerCase()
//value.indexOf("string") ---> if not found return -1
//value.indexOf("string", N) ---> Start search from index N
//value.lastIndexOf("string") --> start search from end
//value.search("string")
//value.slice(start)
//value.slice(start,stop)
//value.substring(start,stop) like slice with two diff [ if start > stop  exchange it automatic ] [ if input index is negative --> replace it to zero ]
//value.subStr(startIndex,#char) write number of char u want instead of stop index
//value.repeat(n)
//value.inClude("string") ->> search for string in value and return true or false ?
//value.startsWith("string") --> is value start with string [ return true or false] ?
//value.startsWith("string",n) --> is value from index n start with string ?
//value.endsWith("string") --> is value end with string ?
//value.endsWith("string",#length) --> is first #length char at value end with string ?
//value.split("") --> convert string to array
//value.split("|") split element every |
//value.split("|",n) add number of the split

//string.replace(/([A-Z])/g, ' $1') =>  catch upper char and Replace it with space+char  ($1 represent catched char ) , $1 cant change name, regular must be around ()
//string.replace(/([a-z])([A-Z])/g, "$1 $2"); ($1 represent catched lower char ,$2 represent catched upper char  )

// 5 > 4 ? console.log("yes") : console.log("no");

// console.log(`my name is ${theName||"unknown"}`) --> if the variable = null or undefined or [false] replace it by "unknown"
// console.log(`my name is ${theName??"unknown"}`) --> if the variable = null or undefined replace it by "unknown"

// switch (x) {
//     case 2:
//     case 3:
//         console.log("multi cases")
//         break;
// }

//{array}//
//Array.isArray(myArray); ---> true or false
//myArray.length
//[1,2,3].toString() // "1,2,3"
//if we add element at extra array index , js will add the element at this index , before it will be empty from the last main array element
//myArray[myArray.lenght]=value; --> add value to end of the array  [...,value];
//myArray[myArray.lenght-1] -->>  get the last array element
//myArray.unshift(a,b,c) --> add elements to the first of the array
//myArray.push(a,b,c) -->  add elements to the end of the array
//let firstElement= myArray.shift() --> remove and return first element at the array
//let lastElement= myArray.pop() --> remove and return last element at the array
//myArray.indexOf(value,startIndexForSearch[op]) --> return the index of the value at the array ,if not found return -1
//myArray.lastIndexOf(value,startIndexForSearch[op]) -->(start search from end) return the index of the value at the array ,if not found return -1
//myArray.includes(value,startIndexForSearch[op]) --> search and return true or false
//myArray.sort(); --> for sort array element alphabetic 1 2 20 30 4 50 9
//myArray.sort((a,b)=>a-b); --> for Progressive sort
//myArray.sort((a,b)=>b-a); --> for descending sort
//myArray.reverse(); --> reverse array element
//myArray.slice(start,stop[op]) --> take slice of elements from array ,return as new array
//myArray.splice(start,#delete[0 for no delete],newElement) -->  we can select elementCount from start index to delete from the array ,also u can add newElement at start [index u want]
// Ex at Splice //
// let theAge = [1, 2, 3, 4, 5, 6, 7, 8];
// console.log(theAge.splice(3, 1,)) --> only delete 4 from array ,line return [4]
// console.log(theAge) -->[1, 2, 3, 5, 6, 7, 8]
// console.log(theAge.splice(1, 0, "A"));  --> add char A to Array at index 1 ,line return [] (no element deleted)
// console.log(theAge) --> [1, 'A', 2, 3, 4, 5, 6, 7, 8]
// End Ex /
//let allArrays= arrayOne.concat(arrayTwo,arrayThree,[1,2,3],"A",...); --> merge Arrays to one array
//myArray.join(separateSign); -->  return array as a String
//math.max(...MyNumberArray)  => get max number at array
//math.min(...MyNumberArray) => get min number at array

// for (const property in object) {
//     object[property];
// }

// for (const property of object) {
//     property;
// }

// for(const i = 0 ;i<Array.length; i++){
//     if(condition){
//         break;--> loop exit
//     }
// }

// for(const i = 0 ;i<Array.length; i++){
//     if(condition){
//         continue; --> loop skip
//     }
// }

//to make break or continue to main loop by nested loop we use mainloop:&nestedloop:
// mainLoop:for(const i = 0 ;i<Array.length; i++){
// nestedLoop:for(const i = 0 ;i<Array.length; i++){
//     if(condition){
//         break mainLoop;
//     }
// }}

//  speacial For form
// let i =0;
// for(;;){
//     code
//     i++;
//     if(i===Array.length)break;
//  }

//function test (){
// code
// if(condition){
// return 'interruptting'; --> stop exe function code
// }
// }

//function testArg (){
// return arguments; => return object
// return [...arguments] => if u want return as array
// }
// testArg(3,4) => {'0':3,'1':4}

/* two way if user did`t enter parameter so it is default value*/
//1- function test(user,age)
// {
// user=user||"unknown";
// age=age||0;
// }
//2- function test(user="unknown",age=0)
// {
//
// }

/* if number of parameters unknown we can use rest parameter it is work as array ,shoud be last parameter func and use only once*/
// function test(...parameters) {
//     for (const value of parameters) {
//         console.log(value)
//     }
// }

//const funcName = (e) => e*e ;
/*
// { higher order function }
// let newArray = myArray.map(function(e){return e+e})--> apply process in each element of the array and return result in new array
// let newArray = myArray.map((e)=> e+e ) -->   dont use {} with arow funcion because it wil return undefined
// let newNumberArray = myStringNumberArray.map(Number) --> ['2','3',"A"] => [2,3,NAN] => map convert string to number

// let newArray = myArray.filter(function(e){return e>5})--> apply condition in each element of the array and return only satisfied element in new array
// let NumberArray = MYArray.filter(Number.isInteger) --> [5,4,6,"8",0,"amr","ahmed"] => [5,4,6,'8',0] => return only number
// let newArray = myArray.filter((el)=> el.includes("yes")) --> return all element contain "yes"

// let result = myArray.find(function(e){return e>5})--> return first element satisfied condition , if mot found any element return undefined
// let result = MYArray.find(Number) --> [5,4,6,"8","amr","ahmed"] => 5 => return only first number
// let result = myArray.find((el)=> el.includes("yes")) --> return fisr element contain "yes" 


// let result = myArray.some(el => el > 5)--> return true if one element or more satisfied condition , if not found return false

// let result = myArray.every(el => el > 5)--> return true if all element satisfied condition , if not Found return false

// let newArray = myArray.indexOf(function(e){return e>5})--> return index of first element satisfied condition , if mot found any element return -1
// let newArray = MYArray.indexOf(Number) --> [5,4,6,"8","amr","ahmed"] => 0 => return only index of first number
// let newArray = myArray.indexOf((el)=> el.includes("yes")) --> return index of first element contain "yes" 

// let newValue = myArray.reduce(function(start,next){return start+next})--> return value (result of return process),at first loop start is first array element and next is always the next element of start ,next loop start = oldStart proccess oldNext
// let newValue = myArray.reduce(function(start,next){return start+next},5)--> if u want to use special start value at beginning ,in this case the next value will be the first element of the array
//const findOdd = (xs) => xs.reduce((a, b) => a ^ b); => return first element duplicated odd time
//const findStay = [1,1,1,1,2,1,1].reduce((a, b) => a ^ b); => return 2 (only diff element)
// domObjects.forEach(function(ele){ele.style.. .}) --> for chat with each array elemet with same message
*/
//{{object}}
// let object = {name:"amr",age:22};
// let object = {};
// let object = new object({});
// let copyObject = Object.create(mainObject) => any change on mainObject also will change on copyObject
// let allObjects = Object.assign(obj1,obj2,obj3,{name:amr}); => sum all objects in one object
//myObject.about="iam amr"; => add new key with value to object or override the key value if key found
//Object.keys(myObject) => return object keys as StringArray => ["name","age"]

/* 
{{ Object with forEach() }}
const user = {name:"amr",age:22}
Object.keys(user) = >[name,age]
Object.keys(user).forEach(el => {
console.log(`${el} : ${user[el]}`); => name:'amr' age:22
}
*/

/* 
{{ Object with map()}}
const user = [{name:"amr",age:22},{name:"mahmoud",age:22},{name:"alo",age:22},{name:"ahmed",age:22}]
const userName = user.map((object)=>{object.name}; => [amr ,mahmoud ,alo ,ahmed]
*/

/* 
{{ Object with filter()}}
const user = [{name:"amr",age:20},{name:"mahmoud",age:19},{name:"alo",age:18},{name:"ahmed",age:22}]
const senoir = user.filter( (object) => { object.age > 19 }; => [{name:"amr",age:20},{name:"ahmed",age:22}]
*/

/*
!important Example
const names = [
    { name: "karem", age: 30 },
    { name: "karim", age: 34 },
    { name: "mohamed", age: 31 },
    { name: "mohamed", age: 40 },
    { name: "mona", age: 26 },
    { name: "mina", age: 29 },
    { name: "ahmed", age: 21 },
    { name: "reham", age: 24 },
    { name: "mina", age: 22 },
    { name: "mahmoud", age: 19 },
];

let sortNames = names.sort((a, b) => b.age - a.age)   // => sort objects by age
let sliceNames = sortNames.slice(0, 8); // => slice 8 objects from array
let filterNames = sliceNames.filter(({ age }) => age > 30); // => filter object by age
let mapNames = filterNames.map((el) => el.name === "karim" ? { ...el, name: "kareem" } : el); // => * object with name value karim replace value to kareem
console.log(mapNames) => print last result

*/
{{Object Shortcut}}
Let name ="amr"
let age =22
let address ="zag"

const info ={
name:name,
age:age,
address:address
}

//=> if key == value we can write object like this
const info ={
name,
age,
address
}

*/

//{{Dom-selector}}
// document.getElementById("");
// document.getElementsByTagName("");
// document.getElementsByClassName("");
// document.title;
// document.body;
// document.forms;
// document.links[n].href="";
// document.images[n].src="";
// document.querySelector("");
// document.querySelectorAll("");

//{{Dom-attributes}}
// myDiv.innerHtml="<span>hello</span>" => <div> <span>hello</span> </div>
// myDiv.textcontent="<spa>hello</spa>" => <div> "<span>hello</span>" </div>
// myDiv.id=""; => change or add id directly
// myDiv.attributes; => return all atributes div have
// myDiv.hasAttribute("datav"); => return true or false
// myDiv.hasAttributes(); => return true[if have any attr] or false
// myDiv.getAttribute("href"); => href content
// myDiv.setAttribute("href","google.com"); => set href content
// myDiv.removeAttribute("href"); => remove href attr

//{{Dom-classes}}
//myDiv.className; => return all class as string "landing stop color"
//myDiv.classList; => return all class as array [landing,stop,color]
//myDiv.classList.contains("classForSearch") => return true||false
//-> EX myDiv.classList.contains("stop") => return true
//myDiv.classList.item("#indexNumber") => return class name with indexNumber in classList Array
//-> Ex myDiv.classList.item("0") => return "landing"
//myDiv.classList.add("className") => Add className to my div
//myDiv.classList.remove("className") => remove className to my div
//myDiv.classList.toggle("className") => remove className if className found || add if not found

//{{Dom-creator}}
// let newDiv = document.createElement("div"); =>create html tag
// let divText = document.createTextNode("IAM DIV"); => create "text"
// let divComment = document.createComment("by amr"); => create <-comment->
// newDiv.appendChild(divText); => push only one object created by document.create to newDiv
// newDiv.append(divComment,divComment); => push multi object created by document.create to newDiv

//{{Dom-children}}
//myDiv.children; => return only element [tags] in it
//myDiv.childrenNodes; return all elememt in it [tags,comment,text]
//myDiv.firstChild; => return first child in myDiv [tags,comment,text]
//myDiv.firstElemetChild => return First [tag] in myDiv
//myDiv.lastChild => return last tag in myDiv
//myDiv.lastElemetChild => return last tag in myDiv

//{{Dom-add new element}}
//myDiv.before("iam above myDiv") => add element before myDiv
/*
 <body>
 iam above myDiv
 myDiv
 </body>
 */
//myDiv.after(document.createElement("p")) => add element after myDiv
/*
 <body>
 myDiv
 <p></p>
 </body>
 */
//myDiv.append(mySpan) => push element in myDiv [at last]
/*
 <myDiv>
 .
 .
 <span></span>
 </myDiv>
 */
//myDiv.prepend(mySpan) => push element in myDiv [at first]
/*
 <myDiv>
 <span></span>
 .
 .
 </myDiv>
 */

//{{Dom-select Element around me}}
//myDiv.nextSlibling();=> select next direct elelemt[tag,text,comment]
//myDiv.nextElemetSlibling();=> select next direct tag
//myDiv.previousSibling();=> select prevoius direct elelemt [tag,text,comment]
//myDiv.previousElementSibling();=> select prevoius direct tag
//myDiv.parentElement();=> select parent tag
//myDiv.remove();=> remove myDiv from page

//{{Dom-clone element}}
//let cloneDiv = myDiv.cloneNode() => clone only myDiv body (<myDiv></myDiv>)
//let cloneDiv = myDiv.cloneNode(true) => clone all myDiv  (<myDiv>contenet</myDiv>)


//{{Dom-cssStyle}}
//myDiv.style.property="value"; => set property elemet style
//myDiv.style.cssText="code css"; => set multi styles by write css code
//myDiv.style.setProperty("PropertyName","value","important[op]") => add inline style
//=> Ex document.documentElement.setProperty("--main-color","red") => edit root: varaible value
//myDiv.style.removeProperty("PropertyName") => Remove inline  style
//document.styleSheets[#file].rules[#block].style..Ex-.removeProperty("line-height") =>edit external css file;
//=> EX document.styleSheets[0].rules[5].style.setProperty("color","red");

//{{Dom-events}}
//object.onclick=function(){};
//object.onclick=()=>{};
//1-onclick
//element.click() => forced click
//2-onconttextmenu (right click)
//3-onmouseEnter
//4-onmouseLeave
//5-window.onload
//6-window.onscroll
//7-window.onresize
//8-input.onfocus
//element.focus() => forced focus
//9-input.onblur
//element.blur() => forced blur
//10-input.onkeyPress
//11-form.onsubmit
//element.event=function(e){} => e will have all info about this event Ex e.key (carry current input value user entered for onkeyPress event) | e.preventDefault;
//element.addEventListener("Event",function1()); => for add multi function on same element
//element.addEventListener("Event",function2());
/*
important case for addEventListener is target element which created by user (after js code loaded)
document.addEventListener("click",function(e){
    if (e.target.className==="userCreated"){
        console.log("iam new element")
    }
})
*/


//{{Bom-time}}
//let timeOut = setTimeOut(function(),time,parameterForTheFunctionIfNeed) => execute function once after specific time
//clearTimeOut(timeOut) => for stop setTimeOut execute
//let interval = setInterval(function(),time,parameterForTheFunctionIfNeed) => execute function every specific time
//clearInterval(interval) => for stop interval execute

//{{Bom-Location(pageURL)}}
//EX URL (href) : https://www.google.com/translate
//protocol :https
//host :www.google.com
//hash :/translate
//location.href="https://www.facebook.com" => method get or change All current URL [go to new site] ,save old URL at browser History
//location.host="www.facebook.com" => get or change webSite Name
//location.protocol="http" => get or change URL protocol
//location.hash="/about" => get or change URL hash
//location.reload(); => reload page
//location.replace("https://www.twitter.com") => function change All current URL [go to new site] without save old URL at browser History
//location.assign("") =>function change All current URL [go to new site] ,save old URL at browser History ,like .href

//window.close() => close current window
//let newWindow = window.open(URL[op],"_blank","width=xx,height=xx,left=xx,top=xx") => open new tap window
//newWindow.focus() => change window focus to newWindow
//window.print() => open print page for print current window

//{{Bom-windowHistory}}
//history.lenght => number of sites at current window history
//history.back() => step back for last page
//history.forward() =>step forward for next page you was opened
//history.go(N) => sites in window history storage as array every site has index N

//{{Bom-windowScroll}}
//window.scrollY => get current scrollY value
//window.scrollX => get current scrollX value
//window.scrollTo(x,y) => scroll to position(x,y)
//window.scrollBy(x,y) => from current scroll value increase value by (x,y)
//window.scrollto({left:xx,top:xx,behavior:"smooth"}) => most use for scroll to specific position with special behavior

//{{Bom-windowLocalStorage(object)}}
//window.localStorage.setItem("key","value") => set new value by function
//window.localStorage.key="value" => set new value
//window.localStorage["key"]="value" => set new value by function
//window.localStaorage.getItem("key") => get saved value by his key
//window.localStaorage.key => get saved value by his key
//window.localStaorage["key"] =>get saved value by his key
//window.localStaorage.removeItem("key") =>remove saved value by his key
//window.localStaorage.clear() => clear localStaorage
//window.localStaorage.key(N) => get key name saved at index N
//JSON.stringify-JSON.parse

//{{Bom-windowSessionStorage(object)}} => saved data only if page reloaded ,if tap close or window data will remove
//window.sessionStorage.setItem("key","value") => set new value by function
//window.sessionStorage.key="value" => set new value
//window.sessionStorage["key"]="value" => set new value by function
//window.sessionStorage.getItem("key") => get saved value by his key
//window.sessionStorage.key => get saved value by his key
//window.sessionStorage["key"] =>get saved value by his key
//window.sessionStorage.removeItem("key") =>remove saved value by his key
//window.sessionStorage.clear() => clear localStaorage
//window.sessionStorage.key(N) => get key name saved at index N


//{{Destructuring Array-easySwap-withSpread-withFunction}}
//let [a,b,c] = ["amr","ahmed","mahmoud"]
//let [a,b,c,d="unknown"] = ["amr","ahmed","mahmoud"]
//let [a,,b,d="unknown"] = ["amr","ahmed","mahmoud"] => a="amr" b="mahmoud" d="unknown"
//let book ="video",video ="book" =>  [book,video]=[video,book];

//let friends = ['amr','ahmed','mahmoud','ali'];
// let [name1,...other] = friends;
// console.log(name1) => amr
// console.log(other) => ['ahmed','mahmoud','ali']

function test (){
return [1,2,3]
}
let [n1,..nms] = test();
/*

//{{Destructuring object ,variablesName must equal keysName - variables sorting not require }}
let info ={
    theName:"amr",
    age:22,
    country:"egypt"
}

const {theName,counrtry,age}= info => declare varaibles(with same object key name) and set value
console.log(theName) => "amr"

const {theName:N,country:C,age:A}= info => declare varaibles with nickname
console.log(N) => "amr"

const {theName:N,address:C="zagazig",age:A}= info => set default value if value not found
console.log(c) => "zagazig"

let theName,contury,age;
({theName,counrtry,age}= info)  => if varaibles has declared before must use () between all progress
console.log(theName) => "amr"


// let friends = {first:"amr",second:"ahmed",third:"mahmoud"}
// let {friend1,...other} = friends;
// console.log(other) => {second:"ahmed",third:"mahmoud"}
*/

/*
{ {Destructuring nestedObject } }
let user = {
    theName: "amr",
    age: 22,
    skills: {
        html: 70,
        css: 80
    }
}

const { skills: { html: H } } = user;
console.log(html) || console.log(H)  => 70

const { html: H, css: C } = user.skills;
console.log(html) || console.log(H)  => 70

console.log(css) || console.log(C)  => 80
*/

/*
 {{Destructuring functionParaneters}}
let user = {
    theName: "amr",
    age: 22,
    skills: {
        html: 70,
        css: 80
    }
}

function skills({ skills: { html: H, css: C } } = user) {
    console.log(H)
    console.log(C)
}

OR

skills(mySkillsObject);
function skills({ skills: { html: H, css: C } }) {
    console.log(H)
    console.log(C)
}
*/


/*
{ {Destructuring mixed content } }
let employer = {
    theName: "amr",
    age: 22,
    skills: {
        html: 70,
        css: 80
    }
    adress: {
        egypt: "zagazig",
        ksa: "riyadh"
    }
}

function info({ theName: N, skills: { html: H, css: C }, adress: { egypt } } = employer) {
    console.log(N) => amr
    console.log(H) => 70
    console.log(C) => 80
    console.log(egypt) => zagazig
}
*/

/*
{ {Destructuring array of object } }
const countries = [
                    {country:"egypt",loc:"africa"},
                    {country:"ksa",loc:"asia"},
                    "required"
                  ];
 const [{country,loc},,what] = countries;                 
 console.log(country) => egypt
 console.log(loc) =>africa
 console.log(what) =>"required"
 
*/


/*
{ { Destructuring object of nested array } }
const info = {
    persons: [
        { name: "amr", age: 22 },
        { name: "ahmed", age: 25, more: ["girl", "150cm"] }
    ]
}

const { persons: [, {more:moreFormat, more: [names, height] }] } = info;
console.log(moreFormat) => ["girl", "150cm"]
console.log(names) => girl
console.log(height) => 150cm
 
*/

/*
{{ Destructuring with ForEach  }}
let countries = [
                {names:"egypt",loc:"afrcia"},
                {names:"uae",loc:"asia"},
                {names:"ksa",loc:"asia"},
                {names:"uk",loc:"euro"}             
]
contries.froEach(({names})=>{
console.log(names);  => egypt ,uae ,ksa ,uk
}
*/

/* 
{{ Object with map() and Destructuring }}
const user = [{name:"amr",age:22},{name:"mahmoud",age:22},{name:"alo",age:22},{name:"ahmed",age:22}]
const userName = user.map(({name,age})=>{name}; => [amr,mahmoud,alo,ahmed]
*/

/* 
{{ Object with filter()  and Destructuring }}
const user = [{name:"amr",age:20},{name:"mahmoud",age:19},{name:"alo",age:18},{name:"ahmed",age:22}]
const senoir = user.filter( ({name,age}) => { age > 19 }; => [{name:"amr",age:20},{name:"ahmed",age:22}]
*/


//{{dataType}}
/*
---> Set <---
let myData= [1,1,1,2,1,3];
let myUnique = new Set(myData) => return new object without array doublicate element
console.log(myUnique) => {1,2,3}
// also can used for string 
let myData= "aaaaaab";
let myUniqueString = new Set(myData) => return new object without string doublicate element
console.log(myUniqueString) => {'a','b'}
-> Methodes <-
myUnique.add(4) => {1,2,3,4}
myUnique.delete(4) => {1,2,3}
myUnique.clear() => {}
myUnique.has(4) => false

---> Weak Set <---
weakSet Allows Garbage collector to do tis task but not map
Garbage :service in browser ,it delete varaible which refere to null
let a = {name:"amr"}
let b = {name:"ahmed"}
let WS = new WeakSet([a,b,b]) receive only array with object Element [not allow another type just Object]
console.log(WS) => {{a},{b}}
-> Methodes <-
let c ={age:22}
myUnique.add(c) => {{a},{b},{c}}
myUnique.delete(c) => {{a},{b},{c}}
myUnique.clear() => {}
myUnique.has(a) => true

---> map <---
dataType like Object ,here u can write func or string or object as key(can be anything) [it is not allow at object]
let myMap = new Map([
    [key,value],
    [key,value]
]) => create map and add item in same line
--> Methodes <--
let myMap = new Map();
myMap.set(10,"number"); => add item
myMap.set("10","string");
myMap.get(10) => "number" => get item by key
myMap.get("10") => "string"
myMap.size() => 2
myMap.delete("10") => delete item by key
myMap.clear()
myMap.has(10) => search  item by key [true || false]

---> Weak Map <---
weakMap Allows Garbage collector to do tis task but not map
Garbage :service in browser ,it delete varaible which refere to null
weakmap => key can be only object
let myMap = new WeakMap() => create weakmap
--> Methodes <--
let info ={name :"amr"}
myMap.set(info); => add object item
myMap.get(info) => "number" => get object item
myMap.delete(info) => delete object item
myMap.clear()
myMap.has(10) => search  item by key [true || false]
*/

//{{Array.from}}
//Array.from("amr") = >["a","m","r"] => return anyType(string || object) to Array
//Array.from("1234",function(n){return +n + +n}) => [2,4,6,8] do process on Array before return it(like map method)
/*
Array.from Ex
1-
let myArray =[1,1,1,2];
let unique = new Set(myArray) => {1,2} object
cosole.log(Array.from(unique)) => [1,2] array
Another Solution => console.log([...new Set(myArray)]) => convert set result to array
2-
function argToArray(){
    return Array.from(arguments);
 }

*/


//{{myArray.copyWithIn(target,start,stop)}}
// copy some elements from myArray and put it in target element (replace target element with copy elements)
//let myArry = [1,2,3,"a","b",4]
//myArray.copyWithIn(1,3,5) => (target ,startCopy ,stopCopy)
//console.log(myArray) => [1,"a","b",3,"a","b"]



//{{myArray.some(func,thisFuncArguments)}}
// like filter ,loop at array ,if one element fulfill the condition method return true
/*
1-
let numbers = [1,2,3,4,5,6,7]
let check = numbers.some((e)=>e>5) if found element greater than 5 ,will return true
console.log(check) => true
2-
let mynumber = 5;
let numbers = [1,2,3,4,5,6,7]
let check = numbers.some(function(e){return e> this},mynumber) add variable can use as this in function to help in check
*/
/*
Ex for test are there array elelemt in the range or not
let range = {
    min :10,
    max:20
}
let checkRange = myArray.some(function(e){
return e>= this.min && e<=this.max
},range)
*/

//{{myArray.every(func,thisFuncArguments)}}
// like some ,loop at array ,if [ALL] element fulfill the condition method return true

//{{spread syntax}}
//console.log(..."amr") => a m r
//console.log([..."amr"]) => ['a','m','r'];
//let AllArray = [...arrayOne,...arrayTwo]; => concatenate Arrays
//let copyArray = [...myArray]; =>copy Array
//myFrindsArray.push(...newFriendArray); =>push inside Array
//math.max(...numberArray); => with math object
//let allObject = {...objectOne,...ObjectTwo,e:5} => spread with object => merge object


//{{Regular}} => /value/gi
// > in value <
// . => All Types
// (x|y) => can be x or y
// [0-9] => number from 0 to 9
// [^0-9] => any character not  from 0 to 9
// [^0-9] => any character not  from 0 to 9
// [a-z] => any character from a to z
// [^a-z] => not any character from a to z
// (/[^a-z]/g, '') => remove all special char
// [A-Z] =>  any character from A to Z
// [A-Za-z] =>  any character from A to Z || a to z
// [A-Za-z0-9] =>  any character from A to Z || a to z || 0 to 9
// [^A-Za-z0-9] =>  get special character
// [abc] => any character from a or b or c
// \w => one char
// \W => not char
// \d => one digital 0-9
// \D => Not one digital 0-9
// \s => one white space
// \S => not white space
// \b => matching at beginning or end of work  \bAMR =>beginning     AMR\b =>end
// \B => Not matching at beginning or end of work
// x+ => x can be one or more
// x* => x can be null or more
// x? => x can be found or nor
// x? => x can be found or nor
// x{5} => x 5 times  [xxxxx]
// x{5,10} => x 5 to 10 times
// x{5,} => x 5 to infi times
// x$ => string end with x
// x^ => string start with x
// /^pattern$/ => for check ( string === pattern ) not ( include pattern )
// ?<=x => string preceded by x  [xamr] => amr
// ?<!x => string not preceded by x [xamr yahmed] => ahmed
// ?=x => string follwed by x [amrx] => amr
// ?!x => string not follwed by x
// TXT.replaceAll(reg,"value")
// TXT.replace(reg,function(el))
// TXT.replace(/\d/g ,d => d < 5 ? 0 : 1);
/* Ex Replace every char by it three time
    replace(/./g, function(char) {
    return char.repeat(3)
    })
*/ 
//srting.match(reg) => [...] ,if not found => return null
/* EX For ignore null value 
// function getCount(str) {
//         return (str.match(/a|e|i|o|u/g) || []).length;
// }
*/
//reg.test(string) => true || false
/*
 //using varaible with regular
function solution(str, ending) {
        let test = `${ending}$`;
        const regex = new RegExp(test, 'g')
        return regex.test(str)
}
*/

/* 
 Ex : Find Domain From URL By two Way

"http://www.zombie-bites.com"  --> domain name = "zombie-bites"

1- By Regular
function domainName(url){
  return url.match(/(?:http(?:s)?:\/\/)?(?:w{3}\.)?([^\.]+)/i)[1];
}

2- by replace method
function domainName(url){
  url = url.replace("https://", '');
  url = url.replace("http://", '');
  url = url.replace("www.", '');
  return url.split('.')[0];
};

*/

CartShop Application using find & map & forEach
// current user cart
const myCart = [
    { id: 1, quantity: 1 },
    { id: 2, quantity: 2 },
    { id: 4, quantity: 3 }
]

// new user selected product

const mySelection = { id: 12, quantity: 3 };

// return new cart with new user product
const handlerNewCart = (myCart, mySelection) => {
    const productStatus = myCart.find(({ id }) => id === mySelection.id)
    if (productStatus) {
        return myCart.map(el =>
            el.id === mySelection.id ? { ...el, quantity: el.quantity + mySelection.quantity } : el
        )
    } else {
        return [...myCart, { ...mySelection, status: "new" }]
    }

}
// new cart value

const NewCart = handlerNewCart(myCart, mySelection);

//final shopping cart => add name to products
//info contain product name from api 
const myCartNames = [
    { id: 1, name: 'phoner' },
    { id: 2, name: 'tv' },
    { id: 4, name: 'labtop' },
    { id: 12, name: 'playstation' }
]

//app properites name to cart

const getItemName = (id) => {
    const realItem = myCartNames.find(e => e.id === id)
    return realItem.quantity
}

myCartNames.forEach(element => {
    const getQuantity = getItemName(element.id);
    element.quantity = getQuantity;
});

console.log(myCartNames)


*/


/***********************************/
// create promis
// const p = new Promise((resolve, reject) => {
//   let num = 1 + 5;
//   if (num === 6) {
//     resolve("success");
//   } else {
//     reject("error");
//   }
// });


// Run the promise
// p.then((message) => {
//   console.log(message);
// })
//   .catch((message) => {
//     console.log(message);
//   })
//   .finally(() => {
//     console.log("promis finally");
//   });


// create function return promis
// const promisHandler =()=>{
//   return new Promise((resolve, reject) => {
//     let num = 1 + 5;
//       if (num === 6) {
//         resolve("success");
//       } else {
//         reject("error");
//       }
//   })
// }

// Run function return promise
// promisHandler.then((message) => {
//   console.log(message);
// })
//   .catch((message) => {
//     console.log(message);
//   })
//   .finally(() => {
//     console.log("promis finally");
//   });


/************************************
{JSON}
/*
  Ajax
  - Ready State => Status Of The Request
  [0] Request Not Initialized
  [1] Server Connection Established
  [2] Request Received
  [3] Processing Request
  [4] Request Is Finished And Response Is Ready
  - Status
  [200] Response Is Successful
  [404] Not Found
*/

let myRequest = new XMLHttpRequest();
myRequest.open("GET", "https://api.github.com/users/amrbahnas/repos OR File.json");
myRequest.send();
myRequest.onreadystatechange = function () {
  if (this.readyState === 4 && this.status === 200) {
  let jsData = JSON.parse(this.responseText);
    console.log(jsData);
  }
};

/**************************************************/
{close the menu when click outside}
// target cart element
  const menu = useRef();
  
  useEffect(() => {
    const handler = (e) => {
      //if the element which clicked not in the menu then
      if (!menu.current.contains(e.target)) {
        // call back function, change state to false , because the state at the parrent component
        closeMenu();
      }
    }; 
    document.addEventListener("mousedown", handler);
    // cleanup event listeners
    return () =>{
      document.removeEventListener("mousedown", handler);
    }
  });
