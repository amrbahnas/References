  
  // using children props as component using react.cloneElement
  const app = ({children})=>{
  const sliderElements = data?.map((item) => (
    <SwiperSlide key={item.id} className={styles.swiperSlide}>
      {React.cloneElement(children, { item, key: item.id })}
    </SwiperSlide>
  ));
  
  }
  
  
/*******************************************/
close menu when click outside

//1- declare state with initial value (fasle)
  const [loginMenuControl, setLoginMenuControl] = useState(false);
  
//2- use use ref to target the menu
  const loginMenu = useRef();
  
//3- useEffect run after click mosue event  
  useEffect(() => {
    const handler = (e) => {
      //if the element which clicked not in the menu then
      if (!loginMenu.current.contains(e.target)) {
        setLoginMenuControl(false);
      }
    };
    document.addEventListener("mousedown", handler);
    // cleanup event listeners
    return () => {
      document.removeEventListener("mousedown", handler);
    };
  });
  
  at return Dom
  return ({
    loginMenuControl&&
    <div>menu</div>
  })
  
  
  /********************************************************************
    import axios, { CanceledError } from "axios";

  useEffect(() => {
    const Controller = new AbortController();

    axios
      .get("https://jsonplaceholder.typicode.com/todos/1", {
        signal: Controller.signal,
      })
      .then((response) => {
        console.log(response.data);
      })
      .catch((error) => {
        if (error instanceof CanceledError) {
          console.log("Request canceled");
        } else {
          console.log(error);
        }
      });

    return () => {
      Controller.abort();
    };
    
  }, []);
  
  
  /**********************************************************************/
  make url domain at separate file
  shortcut for enhacne the code 
  -at api-client file
  export default axios.create({
  baseURL:"https://example.com"
  }) 
  
  -at fetch file
  import apiClient from './api-client'
  apiClient.get("/users")
  
  /****************************************************************************/
  for hidden any http request from the component ,we can declare a class with the functions that fetch the req method that use the prevous enhance and return a promise, so we can import this class at any component
  
  - at api-client file
  ---------------------
  export default axios.create({
  baseURL:"https://example.com"
  }) 
  --------------------
  - user service file
  -----------------------------
  import apiClient from './api-client.js'
  
  interface User {
  id:number;
  name:string
  }
  
  class UserServices {
 
     getAllUsers() {
       const controller = new AbortController()
      const request = apiClient.get<User[]>("/users",{
       signal:controller.signal
       });
       return {request, cancel: ()=> controller.abort()}
    }
 
    deleteUser (id:number) {
       return apiClient.delete("/users/"+id)
   }
    
    createUser (user:User){
       return apiClient.post("/users",user )
   } 
   
    updateUser (user:User) {
     return apiClient.patch("/users/"+user.id,user )
    }
 
  }
  
  export default new UserServices()
  
  ----------------------------
  - app component (use the prev build class)
  ----------------------------
  import userService from './userService.js';
  
  // use getAllUsers Func
    useEffect(()=>{
      const {request, cancel} = userService.getAllUsers();
      request
        .then((res)=>{
        setUsers(res.data)
        }).catch((err)=>console.log(err))
       retrurn () => cancel()
    },[])
  
  // delete func with perfect way, delete user form ui first the from backend , we can use this aprotch with add,update funcs also
   const deleteUser =(id:number)=>{
     //u can save current ui user first
       const currentUser = [...users]
     //then delete user form ui
       setUsers(users.filter(user=>user.id !== id))
     //call the request
       userService.deleteUser().then().catch(
       (err)=>{ 
     // if error, u can return the  users UI agian
       setUsers(currentUser)
        })      
    }
  
   // update func
   const updateUser =(user:User)=>{
       userService.updateUser(user).then().catch()      
    }
         
   // update func
   const createUser =(user:User)=>{
       userService.createUser(user).then().catch()      
    }
